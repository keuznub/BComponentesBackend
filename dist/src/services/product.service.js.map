{"version":3,"sources":["../../../src/services/product.service.ts"],"sourcesContent":["import { PrismaClient, Product  } from \"@prisma/client\"\r\nimport { HttpException } from \"../exceptions/httpException\"\r\nimport { create } from \"domain\"\r\nimport {prisma} from 'database/adapter'\r\n\r\nexport class ProductService{\r\n    \r\n    static async getAll(){\r\n        const findProducts = await prisma.product.findMany({include:{rates:true,categoryProduct:{include:{category:true}}}})\r\n        if(!findProducts) throw new HttpException(404,\"Products not found\")\r\n        return findProducts\r\n    }\r\n\r\n    static async getById(id: number){\r\n        const findProduct = await prisma.product.findUnique({where:{id},include:{rates:{include:{user:true}},categoryProduct:true}})\r\n        if(!findProduct) throw new HttpException(404,\"Product not found\")\r\n        return findProduct\r\n    }\r\n\r\n\r\n    static async save(product: Product, categoriesId: number[]){        \r\n        return await prisma.product.create({data:{...product,\r\n            //categoryProduct: {create:[{category:{connect:{id:1}}}]}\r\n            categoryProduct: {create: categoriesId.map(id=>({category:{connect:{id}}}))}\r\n        }})\r\n    }\r\n\r\n    static async delete(id: number){\r\n        const findProduct = await prisma.product.findUnique({where:{id}})\r\n        if(!findProduct) throw new HttpException(404,\"Product not found\")\r\n        return await prisma.product.delete({where:{id}})\r\n    }\r\n\r\n    static async update(product: Product){\r\n        const {id} = product\r\n        const findProduct = await prisma.product.findUnique({where:{id}})\r\n        if(!findProduct) throw new HttpException(404,\"Product not found\")\r\n        return await prisma.product.update({where:{id},data:{...product}})\r\n    }\r\n\r\n\r\n\r\n\r\n}"],"names":["ProductService","getAll","findProducts","prisma","product","findMany","include","rates","categoryProduct","category","HttpException","getById","id","findProduct","findUnique","where","user","save","categoriesId","create","data","map","connect","delete","update"],"mappings":";;;;+BAKaA;;;eAAAA;;;+BAJiB;yBAET;AAEd,IAAA,AAAMA,iBAAN,MAAMA;IAET,aAAaC,SAAQ;QACjB,MAAMC,eAAe,MAAMC,eAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;YAACC,SAAQ;gBAACC,OAAM;gBAAKC,iBAAgB;oBAACF,SAAQ;wBAACG,UAAS;oBAAI;gBAAC;YAAC;QAAC;QAClH,IAAG,CAACP,cAAc,MAAM,IAAIQ,4BAAa,CAAC,KAAI;QAC9C,OAAOR;IACX;IAEA,aAAaS,QAAQC,EAAU,EAAC;QAC5B,MAAMC,cAAc,MAAMV,eAAM,CAACC,OAAO,CAACU,UAAU,CAAC;YAACC,OAAM;gBAACH;YAAE;YAAEN,SAAQ;gBAACC,OAAM;oBAACD,SAAQ;wBAACU,MAAK;oBAAI;gBAAC;gBAAER,iBAAgB;YAAI;QAAC;QAC1H,IAAG,CAACK,aAAa,MAAM,IAAIH,4BAAa,CAAC,KAAI;QAC7C,OAAOG;IACX;IAGA,aAAaI,KAAKb,OAAgB,EAAEc,YAAsB,EAAC;QACvD,OAAO,MAAMf,eAAM,CAACC,OAAO,CAACe,MAAM,CAAC;YAACC,MAAK;gBAAC,GAAGhB,OAAO;gBAEhDI,iBAAiB;oBAACW,QAAQD,aAAaG,GAAG,CAACT,CAAAA,KAAK,CAAA;4BAACH,UAAS;gCAACa,SAAQ;oCAACV;gCAAE;4BAAC;wBAAC,CAAA;gBAAG;YAC/E;QAAC;IACL;IAEA,aAAaW,OAAOX,EAAU,EAAC;QAC3B,MAAMC,cAAc,MAAMV,eAAM,CAACC,OAAO,CAACU,UAAU,CAAC;YAACC,OAAM;gBAACH;YAAE;QAAC;QAC/D,IAAG,CAACC,aAAa,MAAM,IAAIH,4BAAa,CAAC,KAAI;QAC7C,OAAO,MAAMP,eAAM,CAACC,OAAO,CAACmB,MAAM,CAAC;YAACR,OAAM;gBAACH;YAAE;QAAC;IAClD;IAEA,aAAaY,OAAOpB,OAAgB,EAAC;QACjC,MAAM,EAACQ,EAAE,EAAC,GAAGR;QACb,MAAMS,cAAc,MAAMV,eAAM,CAACC,OAAO,CAACU,UAAU,CAAC;YAACC,OAAM;gBAACH;YAAE;QAAC;QAC/D,IAAG,CAACC,aAAa,MAAM,IAAIH,4BAAa,CAAC,KAAI;QAC7C,OAAO,MAAMP,eAAM,CAACC,OAAO,CAACoB,MAAM,CAAC;YAACT,OAAM;gBAACH;YAAE;YAAEQ,MAAK;gBAAC,GAAGhB,OAAO;YAAA;QAAC;IACpE;AAKJ"}