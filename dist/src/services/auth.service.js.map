{"version":3,"sources":["../../../src/services/auth.service.ts"],"sourcesContent":["import { PrismaClient, User } from \"@prisma/client\";\r\nimport { HttpException } from \"../exceptions/httpException\";\r\nimport bcrypt from 'bcrypt'\r\nimport { sign } from \"crypto\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {prisma} from 'database/adapter'\r\n\r\nconst TOKEN_PASSWORD = process.env.TOKEN_PASSWORD || \"pass\"\r\n\r\nexport class AuthService{\r\n\r\n    static async register(user: User){\r\n        const {email,username} = user\r\n        const findUserEmail = await prisma.user.findUnique({where:{email}})\r\n        if(findUserEmail) throw new HttpException(409,`Email ${user.email} already exists`)\r\n        const findUser = await prisma.user.findUnique({where:{username}})\r\n        if(findUser) throw new HttpException(409,`Username ${user.username} already exists`)\r\n\r\n\r\n        const encryptedPassword = await bcrypt.hash(user.password,10)\r\n        user.password = ''\r\n        return prisma.user.create({\r\n            data:{\r\n                ...user, password:encryptedPassword, role:null\r\n            },\r\n            omit:{\r\n                password: true\r\n            } \r\n        })\r\n    }\r\n\r\n    static async login(user: User){\r\n        \r\n        const {username,email,password} = user\r\n        const  findUser = email ? await prisma.user.findUnique({where:{email}}) : await prisma.user.findUnique({where:{username}})  \r\n        if(!findUser) throw new HttpException(404,\"User not found\")\r\n\r\n        const rightPasword =  await bcrypt.compare(password,findUser.password)\r\n    \r\n        if(!rightPasword) throw new HttpException(401,\"Incorrect Password\")\r\n        \r\n        return jwt.sign({id:findUser.id, role:findUser.role}, TOKEN_PASSWORD, {expiresIn:\"1h\"})\r\n        \r\n        \r\n    }\r\n}"],"names":["HttpException","bcrypt","jwt","prisma","TOKEN_PASSWORD","process","env","AuthService","register","user","email","username","findUserEmail","findUser","encryptedPassword","findUnique","where","hash","password","create","data","role","omit","login","rightPasword","compare","sign","id","expiresIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,aAAa,QAAQ,8BAA8B;AAC5D,OAAOC,YAAY,SAAQ;AAE3B,OAAOC,SAAS,eAAe;AAC/B,SAAQC,MAAM,QAAO,mBAAkB;AAEvC,IAAMC,iBAAiBC,QAAQC,GAAG,CAACF,cAAc,IAAI;AAErD,OAAO,IAAA,AAAMG,4BAAN;;aAAMA;gCAAAA;;kBAAAA;;YAEIC,KAAAA;mBAAb,SAAaA,SAASC,IAAU;uBAAhC,oBAAA;wBACWC,OAAMC,UACPC,eAEAC,UAIAC;;;;gCAPCJ,QAAkBD,KAAlBC,OAAMC,WAAYF,KAAZE;gCACS;;oCAAMR,OAAOM,IAAI,CAACM,UAAU,CAAC;wCAACC,OAAM;4CAACN,OAAAA;wCAAK;oCAAC;;;gCAA3DE,gBAAgB;gCACtB,IAAGA,eAAe,MAAM,IAAIZ,cAAc,KAAI,AAAC,SAAmB,OAAXS,KAAKC,KAAK,EAAC;gCACjD;;oCAAMP,OAAOM,IAAI,CAACM,UAAU,CAAC;wCAACC,OAAM;4CAACL,UAAAA;wCAAQ;oCAAC;;;gCAAzDE,WAAW;gCACjB,IAAGA,UAAU,MAAM,IAAIb,cAAc,KAAI,AAAC,YAAyB,OAAdS,KAAKE,QAAQ,EAAC;gCAGzC;;oCAAMV,OAAOgB,IAAI,CAACR,KAAKS,QAAQ,EAAC;;;gCAApDJ,oBAAoB;gCAC1BL,KAAKS,QAAQ,GAAG;gCAChB;;oCAAOf,OAAOM,IAAI,CAACU,MAAM,CAAC;wCACtBC,MAAK,wCACEX;4CAAMS,UAASJ;4CAAmBO,MAAK;;wCAE9CC,MAAK;4CACDJ,UAAU;wCACd;oCACJ;;;;gBACJ;;;;YAEaK,KAAAA;mBAAb,SAAaA,MAAMd,IAAU;uBAA7B,oBAAA;wBAEWE,UAASD,OAAMQ,UACfL,gBAGDW;;;;gCAJCb,WAA2BF,KAA3BE,UAASD,QAAkBD,KAAlBC,OAAMQ,WAAYT,KAAZS;qCACJR,OAAAA;;;;gCAAQ;;oCAAMP,OAAOM,IAAI,CAACM,UAAU,CAAC;wCAACC,OAAM;4CAACN,OAAAA;wCAAK;oCAAC;;;uCAA3C;;;;;;gCAAgD;;oCAAMP,OAAOM,IAAI,CAACM,UAAU,CAAC;wCAACC,OAAM;4CAACL,UAAAA;wCAAQ;oCAAC;;;uCAA9C;;;gCAAnEE;gCACP,IAAG,CAACA,UAAU,MAAM,IAAIb,cAAc,KAAI;gCAEpB;;oCAAMC,OAAOwB,OAAO,CAACP,UAASL,SAASK,QAAQ;;;gCAA/DM,eAAgB;gCAEtB,IAAG,CAACA,cAAc,MAAM,IAAIxB,cAAc,KAAI;gCAE9C;;oCAAOE,IAAIwB,IAAI,CAAC;wCAACC,IAAGd,SAASc,EAAE;wCAAEN,MAAKR,SAASQ,IAAI;oCAAA,GAAGjB,gBAAgB;wCAACwB,WAAU;oCAAI;;;;gBAGzF;;;;WAnCSrB;IAoCZ"}