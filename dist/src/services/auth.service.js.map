{"version":3,"sources":["../../../src/services/auth.service.ts"],"sourcesContent":["import { PrismaClient, User } from \"@prisma/client\";\r\nimport { HttpException } from \"../exceptions/httpException\";\r\nimport bcrypt from 'bcrypt'\r\nimport { sign } from \"crypto\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {prisma} from 'database/adapter'\r\n\r\nconst TOKEN_PASSWORD = process.env.TOKEN_PASSWORD || \"pass\"\r\n\r\nexport class AuthService{\r\n\r\n    static async register(user: User){\r\n        const {email,username} = user\r\n        const findUserEmail = await prisma.user.findUnique({where:{email}})\r\n        if(findUserEmail) throw new HttpException(409,`Email ${user.email} already exists`)\r\n        const findUser = await prisma.user.findUnique({where:{username}})\r\n        if(findUser) throw new HttpException(409,`Username ${user.username} already exists`)\r\n\r\n\r\n        const encryptedPassword = await bcrypt.hash(user.password,10)\r\n        user.password = ''\r\n        return prisma.user.create({\r\n            data:{\r\n                ...user, password:encryptedPassword, role:null\r\n            },\r\n            omit:{\r\n                password: true\r\n            } \r\n        })\r\n    }\r\n\r\n    static async login(user: User){\r\n        \r\n        const {username,email,password} = user\r\n        const  findUser = email ? await prisma.user.findUnique({where:{email}}) : await prisma.user.findUnique({where:{username}})  \r\n        if(!findUser) throw new HttpException(404,\"User not found\")\r\n\r\n        const rightPasword =  await bcrypt.compare(password,findUser.password)\r\n    \r\n        if(!rightPasword) throw new HttpException(401,\"Incorrect Password\")\r\n        \r\n        return jwt.sign({id:findUser.id, role:findUser.role}, TOKEN_PASSWORD, {expiresIn:\"1h\"})\r\n        \r\n        \r\n    }\r\n}"],"names":["AuthService","TOKEN_PASSWORD","process","env","register","user","email","username","findUserEmail","prisma","findUnique","where","HttpException","findUser","encryptedPassword","bcrypt","hash","password","create","data","role","omit","login","rightPasword","compare","jwt","sign","id","expiresIn"],"mappings":";;;;+BASaA;;;eAAAA;;;+BARiB;+DACX;qEAEH;yBACK;;;;;;AAErB,MAAMC,iBAAiBC,QAAQC,GAAG,CAACF,cAAc,IAAI;AAE9C,IAAA,AAAMD,cAAN,MAAMA;IAET,aAAaI,SAASC,IAAU,EAAC;QAC7B,MAAM,EAACC,KAAK,EAACC,QAAQ,EAAC,GAAGF;QACzB,MAAMG,gBAAgB,MAAMC,eAAM,CAACJ,IAAI,CAACK,UAAU,CAAC;YAACC,OAAM;gBAACL;YAAK;QAAC;QACjE,IAAGE,eAAe,MAAM,IAAII,4BAAa,CAAC,KAAI,CAAC,MAAM,EAAEP,KAAKC,KAAK,CAAC,eAAe,CAAC;QAClF,MAAMO,WAAW,MAAMJ,eAAM,CAACJ,IAAI,CAACK,UAAU,CAAC;YAACC,OAAM;gBAACJ;YAAQ;QAAC;QAC/D,IAAGM,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAI,CAAC,SAAS,EAAEP,KAAKE,QAAQ,CAAC,eAAe,CAAC;QAGnF,MAAMO,oBAAoB,MAAMC,eAAM,CAACC,IAAI,CAACX,KAAKY,QAAQ,EAAC;QAC1DZ,KAAKY,QAAQ,GAAG;QAChB,OAAOR,eAAM,CAACJ,IAAI,CAACa,MAAM,CAAC;YACtBC,MAAK;gBACD,GAAGd,IAAI;gBAAEY,UAASH;gBAAmBM,MAAK;YAC9C;YACAC,MAAK;gBACDJ,UAAU;YACd;QACJ;IACJ;IAEA,aAAaK,MAAMjB,IAAU,EAAC;QAE1B,MAAM,EAACE,QAAQ,EAACD,KAAK,EAACW,QAAQ,EAAC,GAAGZ;QAClC,MAAOQ,WAAWP,QAAQ,MAAMG,eAAM,CAACJ,IAAI,CAACK,UAAU,CAAC;YAACC,OAAM;gBAACL;YAAK;QAAC,KAAK,MAAMG,eAAM,CAACJ,IAAI,CAACK,UAAU,CAAC;YAACC,OAAM;gBAACJ;YAAQ;QAAC;QACxH,IAAG,CAACM,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAI;QAE1C,MAAMW,eAAgB,MAAMR,eAAM,CAACS,OAAO,CAACP,UAASJ,SAASI,QAAQ;QAErE,IAAG,CAACM,cAAc,MAAM,IAAIX,4BAAa,CAAC,KAAI;QAE9C,OAAOa,qBAAG,CAACC,IAAI,CAAC;YAACC,IAAGd,SAASc,EAAE;YAAEP,MAAKP,SAASO,IAAI;QAAA,GAAGnB,gBAAgB;YAAC2B,WAAU;QAAI;IAGzF;AACJ"}