{"version":3,"sources":["../../../src/controllers/order.controller.ts"],"sourcesContent":["import { NextFunction, Request,Response } from \"express\"\r\nimport { OrderService } from \"../services/order.service\"\r\nimport { HttpException } from \"../exceptions/httpException\"\r\nimport { OrderProduct } from \"@prisma/client\"\r\n\r\nexport class OrderController{\r\n\r\n    static async getAll(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const products = await OrderService.getAll()\r\n            res.status(201).json(products)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async getById(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const rate = await OrderService.getById(id)\r\n            res.status(201).json(rate)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async save(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const orderProduct : OrderProduct[] = req.body\r\n            if(!req.user)return\r\n            const idUser = req.user.id\r\n            const result = await OrderService.save(orderProduct, idUser)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    static async delete(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const result = await OrderService.delete(id)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async update(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const order = req.body\r\n            order.id = id\r\n            const result = await OrderService.update(order)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["OrderController","getAll","req","res","next","products","OrderService","status","json","error","getById","id","Number","parseInt","params","isNaN","HttpException","rate","save","orderProduct","body","user","idUser","result","delete","update","order"],"mappings":";;;;+BAKaA;;;eAAAA;;;8BAJgB;+BACC;AAGvB,IAAA,AAAMA,kBAAN,MAAMA;IAET,aAAaC,OAAOC,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMC,WAAW,MAAMC,0BAAY,CAACL,MAAM;YAC1CE,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACH;QACzB,EAAC,OAAMI,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAaC,QAAQR,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC/D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMC,OAAO,MAAMX,0BAAY,CAACI,OAAO,CAACC;YACxCR,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACS;QACzB,EAAC,OAAMR,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAaS,KAAKhB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC5D,IAAG;YACC,MAAMe,eAAgCjB,IAAIkB,IAAI;YAC9C,IAAG,CAAClB,IAAImB,IAAI,EAAC;YACb,MAAMC,SAASpB,IAAImB,IAAI,CAACV,EAAE;YAC1B,MAAMY,SAAS,MAAMjB,0BAAY,CAACY,IAAI,CAACC,cAAcG;YACrDnB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACe;QACzB,EAAC,OAAMd,OAAM;YACTL,KAAKK;QACT;IACJ;IAIA,aAAae,OAAOtB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMO,SAAS,MAAMjB,0BAAY,CAACkB,MAAM,CAACb;YACzCR,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACe;QACzB,EAAC,OAAMd,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAagB,OAAOvB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMU,QAAQxB,IAAIkB,IAAI;YACtBM,MAAMf,EAAE,GAAGA;YACX,MAAMY,SAAS,MAAMjB,0BAAY,CAACmB,MAAM,CAACC;YACzCvB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACe;QACzB,EAAC,OAAMd,OAAM;YACTL,KAAKK;QACT;IACJ;AAGJ"}