{"version":3,"sources":["../../../src/controllers/product.controller.ts"],"sourcesContent":["import { NextFunction, Request,Response } from \"express\"\r\nimport { ProductService } from \"../services/product.service\"\r\nimport { HttpException } from \"../exceptions/httpException\"\r\n\r\nexport class ProductController{\r\n\r\n    static async getAll(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const products = await ProductService.getAll()\r\n            res.status(201).json(products)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async getByID(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const product = await ProductService.getById(id)\r\n            res.status(201).json(product)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async save(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const product = req.body.product\r\n            const categories = req.body.categories\r\n            const result = await ProductService.save(product,categories)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async delete(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const result = await ProductService.delete(id)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async update(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const product = req.body\r\n            product.id = id\r\n            const result = await ProductService.update(product)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["ProductController","getAll","req","res","next","products","ProductService","status","json","error","getByID","id","Number","parseInt","params","isNaN","HttpException","product","getById","save","body","categories","result","delete","update"],"mappings":";;;;+BAIaA;;;eAAAA;;;gCAHkB;+BACD;AAEvB,IAAA,AAAMA,oBAAN,MAAMA;IAET,aAAaC,OAAOC,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMC,WAAW,MAAMC,8BAAc,CAACL,MAAM;YAC5CE,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACH;QACzB,EAAC,OAAMI,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAaC,QAAQR,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC/D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMC,UAAU,MAAMX,8BAAc,CAACY,OAAO,CAACP;YAC7CR,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACS;QACzB,EAAC,OAAMR,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAaU,KAAKjB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC5D,IAAG;YACC,MAAMa,UAAUf,IAAIkB,IAAI,CAACH,OAAO;YAChC,MAAMI,aAAanB,IAAIkB,IAAI,CAACC,UAAU;YACtC,MAAMC,SAAS,MAAMhB,8BAAc,CAACa,IAAI,CAACF,SAAQI;YACjDlB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACc;QACzB,EAAC,OAAMb,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAac,OAAOrB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMM,SAAS,MAAMhB,8BAAc,CAACiB,MAAM,CAACZ;YAC3CR,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACc;QACzB,EAAC,OAAMb,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAae,OAAOtB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMC,UAAUf,IAAIkB,IAAI;YACxBH,QAAQN,EAAE,GAAGA;YACb,MAAMW,SAAS,MAAMhB,8BAAc,CAACkB,MAAM,CAACP;YAC3Cd,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACc;QACzB,EAAC,OAAMb,OAAM;YACTL,KAAKK;QACT;IACJ;AAGJ"}