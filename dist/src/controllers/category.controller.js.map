{"version":3,"sources":["../../../src/controllers/category.controller.ts"],"sourcesContent":["import { NextFunction, Request,Response } from \"express\"\r\nimport { CategoryService } from \"../services/category.service\"\r\nimport { HttpException } from \"../exceptions/httpException\"\r\n\r\nexport class CategoryController{\r\n\r\n    static async getAll(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const categories = await CategoryService.getAll()\r\n            res.status(201).json(categories)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async getByID(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const category = await CategoryService.getById(id)\r\n            res.status(201).json(category)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async save(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const category = req.body\r\n            const result = await CategoryService.save(category)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async delete(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const result = await CategoryService.delete(id)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    static async update(req: Request, res:Response, next:NextFunction){\r\n        try{\r\n            const id = Number.parseInt(req.params.id)\r\n            if(isNaN(id)) throw new HttpException(400,\"Bad request\")\r\n            const product = req.body\r\n            product.id = id\r\n            const result = await CategoryService.update(product)\r\n            res.status(201).json(result)\r\n        }catch(error){\r\n            next(error)\r\n        }\r\n    }\r\n\r\n\r\n}"],"names":["CategoryController","getAll","req","res","next","categories","CategoryService","status","json","error","getByID","id","Number","parseInt","params","isNaN","HttpException","category","getById","save","body","result","delete","update","product"],"mappings":";;;;+BAIaA;;;eAAAA;;;iCAHmB;+BACF;AAEvB,IAAA,AAAMA,qBAAN,MAAMA;IAET,aAAaC,OAAOC,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMC,aAAa,MAAMC,gCAAe,CAACL,MAAM;YAC/CE,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACH;QACzB,EAAC,OAAMI,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAaC,QAAQR,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC/D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMC,WAAW,MAAMX,gCAAe,CAACY,OAAO,CAACP;YAC/CR,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACS;QACzB,EAAC,OAAMR,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAaU,KAAKjB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC5D,IAAG;YACC,MAAMa,WAAWf,IAAIkB,IAAI;YACzB,MAAMC,SAAS,MAAMf,gCAAe,CAACa,IAAI,CAACF;YAC1Cd,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACa;QACzB,EAAC,OAAMZ,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAaa,OAAOpB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMK,SAAS,MAAMf,gCAAe,CAACgB,MAAM,CAACX;YAC5CR,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACa;QACzB,EAAC,OAAMZ,OAAM;YACTL,KAAKK;QACT;IACJ;IAEA,aAAac,OAAOrB,GAAY,EAAEC,GAAY,EAAEC,IAAiB,EAAC;QAC9D,IAAG;YACC,MAAMO,KAAKC,OAAOC,QAAQ,CAACX,IAAIY,MAAM,CAACH,EAAE;YACxC,IAAGI,MAAMJ,KAAK,MAAM,IAAIK,4BAAa,CAAC,KAAI;YAC1C,MAAMQ,UAAUtB,IAAIkB,IAAI;YACxBI,QAAQb,EAAE,GAAGA;YACb,MAAMU,SAAS,MAAMf,gCAAe,CAACiB,MAAM,CAACC;YAC5CrB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACa;QACzB,EAAC,OAAMZ,OAAM;YACTL,KAAKK;QACT;IACJ;AAGJ"}